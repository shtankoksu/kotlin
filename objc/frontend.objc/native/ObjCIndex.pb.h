// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ObjCIndex.proto

#ifndef PROTOBUF_ObjCIndex_2eproto__INCLUDED
#define PROTOBUF_ObjCIndex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ObjCIndex_2eproto();
void protobuf_AssignDesc_ObjCIndex_2eproto();
void protobuf_ShutdownFile_ObjCIndex_2eproto();

class Function;
class Function_Parameter;
class ObjCMethod;
class ObjCProperty;
class ObjCClass;
class ObjCProtocol;
class ObjCCategory;
class TranslationUnit;

// ===================================================================

class Function_Parameter : public ::google::protobuf::Message {
 public:
  Function_Parameter();
  virtual ~Function_Parameter();

  Function_Parameter(const Function_Parameter& from);

  inline Function_Parameter& operator=(const Function_Parameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Function_Parameter& default_instance();

  void Swap(Function_Parameter* other);

  // implements Message ----------------------------------------------

  Function_Parameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Function_Parameter& from);
  void MergeFrom(const Function_Parameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:Function.Parameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ObjCIndex_2eproto();
  friend void protobuf_AssignDesc_ObjCIndex_2eproto();
  friend void protobuf_ShutdownFile_ObjCIndex_2eproto();

  void InitAsDefaultInstance();
  static Function_Parameter* default_instance_;
};
// -------------------------------------------------------------------

class Function : public ::google::protobuf::Message {
 public:
  Function();
  virtual ~Function();

  Function(const Function& from);

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Function& default_instance();

  void Swap(Function* other);

  // implements Message ----------------------------------------------

  Function* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Function& from);
  void MergeFrom(const Function& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Function_Parameter Parameter;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string return_type = 2;
  inline bool has_return_type() const;
  inline void clear_return_type();
  static const int kReturnTypeFieldNumber = 2;
  inline const ::std::string& return_type() const;
  inline void set_return_type(const ::std::string& value);
  inline void set_return_type(const char* value);
  inline void set_return_type(const char* value, size_t size);
  inline ::std::string* mutable_return_type();
  inline ::std::string* release_return_type();
  inline void set_allocated_return_type(::std::string* return_type);

  // repeated .Function.Parameter parameter = 3;
  inline int parameter_size() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 3;
  inline const ::Function_Parameter& parameter(int index) const;
  inline ::Function_Parameter* mutable_parameter(int index);
  inline ::Function_Parameter* add_parameter();
  inline const ::google::protobuf::RepeatedPtrField< ::Function_Parameter >&
      parameter() const;
  inline ::google::protobuf::RepeatedPtrField< ::Function_Parameter >*
      mutable_parameter();

  // @@protoc_insertion_point(class_scope:Function)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_return_type();
  inline void clear_has_return_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* return_type_;
  ::google::protobuf::RepeatedPtrField< ::Function_Parameter > parameter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ObjCIndex_2eproto();
  friend void protobuf_AssignDesc_ObjCIndex_2eproto();
  friend void protobuf_ShutdownFile_ObjCIndex_2eproto();

  void InitAsDefaultInstance();
  static Function* default_instance_;
};
// -------------------------------------------------------------------

class ObjCMethod : public ::google::protobuf::Message {
 public:
  ObjCMethod();
  virtual ~ObjCMethod();

  ObjCMethod(const ObjCMethod& from);

  inline ObjCMethod& operator=(const ObjCMethod& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjCMethod& default_instance();

  void Swap(ObjCMethod* other);

  // implements Message ----------------------------------------------

  ObjCMethod* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjCMethod& from);
  void MergeFrom(const ObjCMethod& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Function function = 1;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 1;
  inline const ::Function& function() const;
  inline ::Function* mutable_function();
  inline ::Function* release_function();
  inline void set_allocated_function(::Function* function);

  // required bool class_method = 2;
  inline bool has_class_method() const;
  inline void clear_class_method();
  static const int kClassMethodFieldNumber = 2;
  inline bool class_method() const;
  inline void set_class_method(bool value);

  // @@protoc_insertion_point(class_scope:ObjCMethod)
 private:
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_class_method();
  inline void clear_has_class_method();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Function* function_;
  bool class_method_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ObjCIndex_2eproto();
  friend void protobuf_AssignDesc_ObjCIndex_2eproto();
  friend void protobuf_ShutdownFile_ObjCIndex_2eproto();

  void InitAsDefaultInstance();
  static ObjCMethod* default_instance_;
};
// -------------------------------------------------------------------

class ObjCProperty : public ::google::protobuf::Message {
 public:
  ObjCProperty();
  virtual ~ObjCProperty();

  ObjCProperty(const ObjCProperty& from);

  inline ObjCProperty& operator=(const ObjCProperty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjCProperty& default_instance();

  void Swap(ObjCProperty* other);

  // implements Message ----------------------------------------------

  ObjCProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjCProperty& from);
  void MergeFrom(const ObjCProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:ObjCProperty)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ObjCIndex_2eproto();
  friend void protobuf_AssignDesc_ObjCIndex_2eproto();
  friend void protobuf_ShutdownFile_ObjCIndex_2eproto();

  void InitAsDefaultInstance();
  static ObjCProperty* default_instance_;
};
// -------------------------------------------------------------------

class ObjCClass : public ::google::protobuf::Message {
 public:
  ObjCClass();
  virtual ~ObjCClass();

  ObjCClass(const ObjCClass& from);

  inline ObjCClass& operator=(const ObjCClass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjCClass& default_instance();

  void Swap(ObjCClass* other);

  // implements Message ----------------------------------------------

  ObjCClass* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjCClass& from);
  void MergeFrom(const ObjCClass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string base_class = 2;
  inline bool has_base_class() const;
  inline void clear_base_class();
  static const int kBaseClassFieldNumber = 2;
  inline const ::std::string& base_class() const;
  inline void set_base_class(const ::std::string& value);
  inline void set_base_class(const char* value);
  inline void set_base_class(const char* value, size_t size);
  inline ::std::string* mutable_base_class();
  inline ::std::string* release_base_class();
  inline void set_allocated_base_class(::std::string* base_class);

  // repeated string protocol = 3;
  inline int protocol_size() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 3;
  inline const ::std::string& protocol(int index) const;
  inline ::std::string* mutable_protocol(int index);
  inline void set_protocol(int index, const ::std::string& value);
  inline void set_protocol(int index, const char* value);
  inline void set_protocol(int index, const char* value, size_t size);
  inline ::std::string* add_protocol();
  inline void add_protocol(const ::std::string& value);
  inline void add_protocol(const char* value);
  inline void add_protocol(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& protocol() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_protocol();

  // repeated string category = 4;
  inline int category_size() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 4;
  inline const ::std::string& category(int index) const;
  inline ::std::string* mutable_category(int index);
  inline void set_category(int index, const ::std::string& value);
  inline void set_category(int index, const char* value);
  inline void set_category(int index, const char* value, size_t size);
  inline ::std::string* add_category();
  inline void add_category(const ::std::string& value);
  inline void add_category(const char* value);
  inline void add_category(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& category() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_category();

  // repeated .ObjCMethod method = 5;
  inline int method_size() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 5;
  inline const ::ObjCMethod& method(int index) const;
  inline ::ObjCMethod* mutable_method(int index);
  inline ::ObjCMethod* add_method();
  inline const ::google::protobuf::RepeatedPtrField< ::ObjCMethod >&
      method() const;
  inline ::google::protobuf::RepeatedPtrField< ::ObjCMethod >*
      mutable_method();

  // repeated .ObjCProperty property = 6;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 6;
  inline const ::ObjCProperty& property(int index) const;
  inline ::ObjCProperty* mutable_property(int index);
  inline ::ObjCProperty* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::ObjCProperty >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::ObjCProperty >*
      mutable_property();

  // @@protoc_insertion_point(class_scope:ObjCClass)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_base_class();
  inline void clear_has_base_class();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* base_class_;
  ::google::protobuf::RepeatedPtrField< ::std::string> protocol_;
  ::google::protobuf::RepeatedPtrField< ::std::string> category_;
  ::google::protobuf::RepeatedPtrField< ::ObjCMethod > method_;
  ::google::protobuf::RepeatedPtrField< ::ObjCProperty > property_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ObjCIndex_2eproto();
  friend void protobuf_AssignDesc_ObjCIndex_2eproto();
  friend void protobuf_ShutdownFile_ObjCIndex_2eproto();

  void InitAsDefaultInstance();
  static ObjCClass* default_instance_;
};
// -------------------------------------------------------------------

class ObjCProtocol : public ::google::protobuf::Message {
 public:
  ObjCProtocol();
  virtual ~ObjCProtocol();

  ObjCProtocol(const ObjCProtocol& from);

  inline ObjCProtocol& operator=(const ObjCProtocol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjCProtocol& default_instance();

  void Swap(ObjCProtocol* other);

  // implements Message ----------------------------------------------

  ObjCProtocol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjCProtocol& from);
  void MergeFrom(const ObjCProtocol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string base_protocol = 2;
  inline int base_protocol_size() const;
  inline void clear_base_protocol();
  static const int kBaseProtocolFieldNumber = 2;
  inline const ::std::string& base_protocol(int index) const;
  inline ::std::string* mutable_base_protocol(int index);
  inline void set_base_protocol(int index, const ::std::string& value);
  inline void set_base_protocol(int index, const char* value);
  inline void set_base_protocol(int index, const char* value, size_t size);
  inline ::std::string* add_base_protocol();
  inline void add_base_protocol(const ::std::string& value);
  inline void add_base_protocol(const char* value);
  inline void add_base_protocol(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& base_protocol() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_base_protocol();

  // repeated .ObjCMethod method = 3;
  inline int method_size() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 3;
  inline const ::ObjCMethod& method(int index) const;
  inline ::ObjCMethod* mutable_method(int index);
  inline ::ObjCMethod* add_method();
  inline const ::google::protobuf::RepeatedPtrField< ::ObjCMethod >&
      method() const;
  inline ::google::protobuf::RepeatedPtrField< ::ObjCMethod >*
      mutable_method();

  // repeated .ObjCProperty property = 4;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 4;
  inline const ::ObjCProperty& property(int index) const;
  inline ::ObjCProperty* mutable_property(int index);
  inline ::ObjCProperty* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::ObjCProperty >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::ObjCProperty >*
      mutable_property();

  // @@protoc_insertion_point(class_scope:ObjCProtocol)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> base_protocol_;
  ::google::protobuf::RepeatedPtrField< ::ObjCMethod > method_;
  ::google::protobuf::RepeatedPtrField< ::ObjCProperty > property_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ObjCIndex_2eproto();
  friend void protobuf_AssignDesc_ObjCIndex_2eproto();
  friend void protobuf_ShutdownFile_ObjCIndex_2eproto();

  void InitAsDefaultInstance();
  static ObjCProtocol* default_instance_;
};
// -------------------------------------------------------------------

class ObjCCategory : public ::google::protobuf::Message {
 public:
  ObjCCategory();
  virtual ~ObjCCategory();

  ObjCCategory(const ObjCCategory& from);

  inline ObjCCategory& operator=(const ObjCCategory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjCCategory& default_instance();

  void Swap(ObjCCategory* other);

  // implements Message ----------------------------------------------

  ObjCCategory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjCCategory& from);
  void MergeFrom(const ObjCCategory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string base_protocol = 2;
  inline int base_protocol_size() const;
  inline void clear_base_protocol();
  static const int kBaseProtocolFieldNumber = 2;
  inline const ::std::string& base_protocol(int index) const;
  inline ::std::string* mutable_base_protocol(int index);
  inline void set_base_protocol(int index, const ::std::string& value);
  inline void set_base_protocol(int index, const char* value);
  inline void set_base_protocol(int index, const char* value, size_t size);
  inline ::std::string* add_base_protocol();
  inline void add_base_protocol(const ::std::string& value);
  inline void add_base_protocol(const char* value);
  inline void add_base_protocol(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& base_protocol() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_base_protocol();

  // repeated .ObjCMethod method = 3;
  inline int method_size() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 3;
  inline const ::ObjCMethod& method(int index) const;
  inline ::ObjCMethod* mutable_method(int index);
  inline ::ObjCMethod* add_method();
  inline const ::google::protobuf::RepeatedPtrField< ::ObjCMethod >&
      method() const;
  inline ::google::protobuf::RepeatedPtrField< ::ObjCMethod >*
      mutable_method();

  // repeated .ObjCProperty property = 4;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 4;
  inline const ::ObjCProperty& property(int index) const;
  inline ::ObjCProperty* mutable_property(int index);
  inline ::ObjCProperty* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::ObjCProperty >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::ObjCProperty >*
      mutable_property();

  // @@protoc_insertion_point(class_scope:ObjCCategory)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> base_protocol_;
  ::google::protobuf::RepeatedPtrField< ::ObjCMethod > method_;
  ::google::protobuf::RepeatedPtrField< ::ObjCProperty > property_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ObjCIndex_2eproto();
  friend void protobuf_AssignDesc_ObjCIndex_2eproto();
  friend void protobuf_ShutdownFile_ObjCIndex_2eproto();

  void InitAsDefaultInstance();
  static ObjCCategory* default_instance_;
};
// -------------------------------------------------------------------

class TranslationUnit : public ::google::protobuf::Message {
 public:
  TranslationUnit();
  virtual ~TranslationUnit();

  TranslationUnit(const TranslationUnit& from);

  inline TranslationUnit& operator=(const TranslationUnit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TranslationUnit& default_instance();

  void Swap(TranslationUnit* other);

  // implements Message ----------------------------------------------

  TranslationUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TranslationUnit& from);
  void MergeFrom(const TranslationUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ObjCClass class = 1;
  inline int class__size() const;
  inline void clear_class_();
  static const int kClassFieldNumber = 1;
  inline const ::ObjCClass& class_(int index) const;
  inline ::ObjCClass* mutable_class_(int index);
  inline ::ObjCClass* add_class_();
  inline const ::google::protobuf::RepeatedPtrField< ::ObjCClass >&
      class_() const;
  inline ::google::protobuf::RepeatedPtrField< ::ObjCClass >*
      mutable_class_();

  // repeated .ObjCProtocol protocol = 2;
  inline int protocol_size() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  inline const ::ObjCProtocol& protocol(int index) const;
  inline ::ObjCProtocol* mutable_protocol(int index);
  inline ::ObjCProtocol* add_protocol();
  inline const ::google::protobuf::RepeatedPtrField< ::ObjCProtocol >&
      protocol() const;
  inline ::google::protobuf::RepeatedPtrField< ::ObjCProtocol >*
      mutable_protocol();

  // repeated .ObjCCategory category = 3;
  inline int category_size() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 3;
  inline const ::ObjCCategory& category(int index) const;
  inline ::ObjCCategory* mutable_category(int index);
  inline ::ObjCCategory* add_category();
  inline const ::google::protobuf::RepeatedPtrField< ::ObjCCategory >&
      category() const;
  inline ::google::protobuf::RepeatedPtrField< ::ObjCCategory >*
      mutable_category();

  // @@protoc_insertion_point(class_scope:TranslationUnit)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ObjCClass > class__;
  ::google::protobuf::RepeatedPtrField< ::ObjCProtocol > protocol_;
  ::google::protobuf::RepeatedPtrField< ::ObjCCategory > category_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ObjCIndex_2eproto();
  friend void protobuf_AssignDesc_ObjCIndex_2eproto();
  friend void protobuf_ShutdownFile_ObjCIndex_2eproto();

  void InitAsDefaultInstance();
  static TranslationUnit* default_instance_;
};
// ===================================================================


// ===================================================================

// Function_Parameter

// required string name = 1;
inline bool Function_Parameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Function_Parameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Function_Parameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Function_Parameter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Function_Parameter::name() const {
  return *name_;
}
inline void Function_Parameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Function_Parameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Function_Parameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Function_Parameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Function_Parameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Function_Parameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2;
inline bool Function_Parameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Function_Parameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Function_Parameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Function_Parameter::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Function_Parameter::type() const {
  return *type_;
}
inline void Function_Parameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Function_Parameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Function_Parameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Function_Parameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Function_Parameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Function_Parameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Function

// required string name = 1;
inline bool Function::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Function::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Function::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Function::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Function::name() const {
  return *name_;
}
inline void Function::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Function::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Function::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Function::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Function::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Function::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string return_type = 2;
inline bool Function::has_return_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Function::set_has_return_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Function::clear_has_return_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Function::clear_return_type() {
  if (return_type_ != &::google::protobuf::internal::kEmptyString) {
    return_type_->clear();
  }
  clear_has_return_type();
}
inline const ::std::string& Function::return_type() const {
  return *return_type_;
}
inline void Function::set_return_type(const ::std::string& value) {
  set_has_return_type();
  if (return_type_ == &::google::protobuf::internal::kEmptyString) {
    return_type_ = new ::std::string;
  }
  return_type_->assign(value);
}
inline void Function::set_return_type(const char* value) {
  set_has_return_type();
  if (return_type_ == &::google::protobuf::internal::kEmptyString) {
    return_type_ = new ::std::string;
  }
  return_type_->assign(value);
}
inline void Function::set_return_type(const char* value, size_t size) {
  set_has_return_type();
  if (return_type_ == &::google::protobuf::internal::kEmptyString) {
    return_type_ = new ::std::string;
  }
  return_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Function::mutable_return_type() {
  set_has_return_type();
  if (return_type_ == &::google::protobuf::internal::kEmptyString) {
    return_type_ = new ::std::string;
  }
  return return_type_;
}
inline ::std::string* Function::release_return_type() {
  clear_has_return_type();
  if (return_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = return_type_;
    return_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Function::set_allocated_return_type(::std::string* return_type) {
  if (return_type_ != &::google::protobuf::internal::kEmptyString) {
    delete return_type_;
  }
  if (return_type) {
    set_has_return_type();
    return_type_ = return_type;
  } else {
    clear_has_return_type();
    return_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Function.Parameter parameter = 3;
inline int Function::parameter_size() const {
  return parameter_.size();
}
inline void Function::clear_parameter() {
  parameter_.Clear();
}
inline const ::Function_Parameter& Function::parameter(int index) const {
  return parameter_.Get(index);
}
inline ::Function_Parameter* Function::mutable_parameter(int index) {
  return parameter_.Mutable(index);
}
inline ::Function_Parameter* Function::add_parameter() {
  return parameter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Function_Parameter >&
Function::parameter() const {
  return parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::Function_Parameter >*
Function::mutable_parameter() {
  return &parameter_;
}

// -------------------------------------------------------------------

// ObjCMethod

// required .Function function = 1;
inline bool ObjCMethod::has_function() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjCMethod::set_has_function() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjCMethod::clear_has_function() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjCMethod::clear_function() {
  if (function_ != NULL) function_->::Function::Clear();
  clear_has_function();
}
inline const ::Function& ObjCMethod::function() const {
  return function_ != NULL ? *function_ : *default_instance_->function_;
}
inline ::Function* ObjCMethod::mutable_function() {
  set_has_function();
  if (function_ == NULL) function_ = new ::Function;
  return function_;
}
inline ::Function* ObjCMethod::release_function() {
  clear_has_function();
  ::Function* temp = function_;
  function_ = NULL;
  return temp;
}
inline void ObjCMethod::set_allocated_function(::Function* function) {
  delete function_;
  function_ = function;
  if (function) {
    set_has_function();
  } else {
    clear_has_function();
  }
}

// required bool class_method = 2;
inline bool ObjCMethod::has_class_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjCMethod::set_has_class_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjCMethod::clear_has_class_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjCMethod::clear_class_method() {
  class_method_ = false;
  clear_has_class_method();
}
inline bool ObjCMethod::class_method() const {
  return class_method_;
}
inline void ObjCMethod::set_class_method(bool value) {
  set_has_class_method();
  class_method_ = value;
}

// -------------------------------------------------------------------

// ObjCProperty

// required string name = 1;
inline bool ObjCProperty::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjCProperty::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjCProperty::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjCProperty::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ObjCProperty::name() const {
  return *name_;
}
inline void ObjCProperty::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ObjCProperty::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ObjCProperty::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjCProperty::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ObjCProperty::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObjCProperty::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2;
inline bool ObjCProperty::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjCProperty::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjCProperty::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjCProperty::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& ObjCProperty::type() const {
  return *type_;
}
inline void ObjCProperty::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void ObjCProperty::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void ObjCProperty::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjCProperty::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* ObjCProperty::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObjCProperty::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ObjCClass

// required string name = 1;
inline bool ObjCClass::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjCClass::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjCClass::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjCClass::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ObjCClass::name() const {
  return *name_;
}
inline void ObjCClass::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ObjCClass::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ObjCClass::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjCClass::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ObjCClass::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObjCClass::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string base_class = 2;
inline bool ObjCClass::has_base_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjCClass::set_has_base_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjCClass::clear_has_base_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjCClass::clear_base_class() {
  if (base_class_ != &::google::protobuf::internal::kEmptyString) {
    base_class_->clear();
  }
  clear_has_base_class();
}
inline const ::std::string& ObjCClass::base_class() const {
  return *base_class_;
}
inline void ObjCClass::set_base_class(const ::std::string& value) {
  set_has_base_class();
  if (base_class_ == &::google::protobuf::internal::kEmptyString) {
    base_class_ = new ::std::string;
  }
  base_class_->assign(value);
}
inline void ObjCClass::set_base_class(const char* value) {
  set_has_base_class();
  if (base_class_ == &::google::protobuf::internal::kEmptyString) {
    base_class_ = new ::std::string;
  }
  base_class_->assign(value);
}
inline void ObjCClass::set_base_class(const char* value, size_t size) {
  set_has_base_class();
  if (base_class_ == &::google::protobuf::internal::kEmptyString) {
    base_class_ = new ::std::string;
  }
  base_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjCClass::mutable_base_class() {
  set_has_base_class();
  if (base_class_ == &::google::protobuf::internal::kEmptyString) {
    base_class_ = new ::std::string;
  }
  return base_class_;
}
inline ::std::string* ObjCClass::release_base_class() {
  clear_has_base_class();
  if (base_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = base_class_;
    base_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObjCClass::set_allocated_base_class(::std::string* base_class) {
  if (base_class_ != &::google::protobuf::internal::kEmptyString) {
    delete base_class_;
  }
  if (base_class) {
    set_has_base_class();
    base_class_ = base_class;
  } else {
    clear_has_base_class();
    base_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string protocol = 3;
inline int ObjCClass::protocol_size() const {
  return protocol_.size();
}
inline void ObjCClass::clear_protocol() {
  protocol_.Clear();
}
inline const ::std::string& ObjCClass::protocol(int index) const {
  return protocol_.Get(index);
}
inline ::std::string* ObjCClass::mutable_protocol(int index) {
  return protocol_.Mutable(index);
}
inline void ObjCClass::set_protocol(int index, const ::std::string& value) {
  protocol_.Mutable(index)->assign(value);
}
inline void ObjCClass::set_protocol(int index, const char* value) {
  protocol_.Mutable(index)->assign(value);
}
inline void ObjCClass::set_protocol(int index, const char* value, size_t size) {
  protocol_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjCClass::add_protocol() {
  return protocol_.Add();
}
inline void ObjCClass::add_protocol(const ::std::string& value) {
  protocol_.Add()->assign(value);
}
inline void ObjCClass::add_protocol(const char* value) {
  protocol_.Add()->assign(value);
}
inline void ObjCClass::add_protocol(const char* value, size_t size) {
  protocol_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ObjCClass::protocol() const {
  return protocol_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ObjCClass::mutable_protocol() {
  return &protocol_;
}

// repeated string category = 4;
inline int ObjCClass::category_size() const {
  return category_.size();
}
inline void ObjCClass::clear_category() {
  category_.Clear();
}
inline const ::std::string& ObjCClass::category(int index) const {
  return category_.Get(index);
}
inline ::std::string* ObjCClass::mutable_category(int index) {
  return category_.Mutable(index);
}
inline void ObjCClass::set_category(int index, const ::std::string& value) {
  category_.Mutable(index)->assign(value);
}
inline void ObjCClass::set_category(int index, const char* value) {
  category_.Mutable(index)->assign(value);
}
inline void ObjCClass::set_category(int index, const char* value, size_t size) {
  category_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjCClass::add_category() {
  return category_.Add();
}
inline void ObjCClass::add_category(const ::std::string& value) {
  category_.Add()->assign(value);
}
inline void ObjCClass::add_category(const char* value) {
  category_.Add()->assign(value);
}
inline void ObjCClass::add_category(const char* value, size_t size) {
  category_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ObjCClass::category() const {
  return category_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ObjCClass::mutable_category() {
  return &category_;
}

// repeated .ObjCMethod method = 5;
inline int ObjCClass::method_size() const {
  return method_.size();
}
inline void ObjCClass::clear_method() {
  method_.Clear();
}
inline const ::ObjCMethod& ObjCClass::method(int index) const {
  return method_.Get(index);
}
inline ::ObjCMethod* ObjCClass::mutable_method(int index) {
  return method_.Mutable(index);
}
inline ::ObjCMethod* ObjCClass::add_method() {
  return method_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ObjCMethod >&
ObjCClass::method() const {
  return method_;
}
inline ::google::protobuf::RepeatedPtrField< ::ObjCMethod >*
ObjCClass::mutable_method() {
  return &method_;
}

// repeated .ObjCProperty property = 6;
inline int ObjCClass::property_size() const {
  return property_.size();
}
inline void ObjCClass::clear_property() {
  property_.Clear();
}
inline const ::ObjCProperty& ObjCClass::property(int index) const {
  return property_.Get(index);
}
inline ::ObjCProperty* ObjCClass::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::ObjCProperty* ObjCClass::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ObjCProperty >&
ObjCClass::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::ObjCProperty >*
ObjCClass::mutable_property() {
  return &property_;
}

// -------------------------------------------------------------------

// ObjCProtocol

// required string name = 1;
inline bool ObjCProtocol::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjCProtocol::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjCProtocol::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjCProtocol::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ObjCProtocol::name() const {
  return *name_;
}
inline void ObjCProtocol::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ObjCProtocol::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ObjCProtocol::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjCProtocol::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ObjCProtocol::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObjCProtocol::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string base_protocol = 2;
inline int ObjCProtocol::base_protocol_size() const {
  return base_protocol_.size();
}
inline void ObjCProtocol::clear_base_protocol() {
  base_protocol_.Clear();
}
inline const ::std::string& ObjCProtocol::base_protocol(int index) const {
  return base_protocol_.Get(index);
}
inline ::std::string* ObjCProtocol::mutable_base_protocol(int index) {
  return base_protocol_.Mutable(index);
}
inline void ObjCProtocol::set_base_protocol(int index, const ::std::string& value) {
  base_protocol_.Mutable(index)->assign(value);
}
inline void ObjCProtocol::set_base_protocol(int index, const char* value) {
  base_protocol_.Mutable(index)->assign(value);
}
inline void ObjCProtocol::set_base_protocol(int index, const char* value, size_t size) {
  base_protocol_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjCProtocol::add_base_protocol() {
  return base_protocol_.Add();
}
inline void ObjCProtocol::add_base_protocol(const ::std::string& value) {
  base_protocol_.Add()->assign(value);
}
inline void ObjCProtocol::add_base_protocol(const char* value) {
  base_protocol_.Add()->assign(value);
}
inline void ObjCProtocol::add_base_protocol(const char* value, size_t size) {
  base_protocol_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ObjCProtocol::base_protocol() const {
  return base_protocol_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ObjCProtocol::mutable_base_protocol() {
  return &base_protocol_;
}

// repeated .ObjCMethod method = 3;
inline int ObjCProtocol::method_size() const {
  return method_.size();
}
inline void ObjCProtocol::clear_method() {
  method_.Clear();
}
inline const ::ObjCMethod& ObjCProtocol::method(int index) const {
  return method_.Get(index);
}
inline ::ObjCMethod* ObjCProtocol::mutable_method(int index) {
  return method_.Mutable(index);
}
inline ::ObjCMethod* ObjCProtocol::add_method() {
  return method_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ObjCMethod >&
ObjCProtocol::method() const {
  return method_;
}
inline ::google::protobuf::RepeatedPtrField< ::ObjCMethod >*
ObjCProtocol::mutable_method() {
  return &method_;
}

// repeated .ObjCProperty property = 4;
inline int ObjCProtocol::property_size() const {
  return property_.size();
}
inline void ObjCProtocol::clear_property() {
  property_.Clear();
}
inline const ::ObjCProperty& ObjCProtocol::property(int index) const {
  return property_.Get(index);
}
inline ::ObjCProperty* ObjCProtocol::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::ObjCProperty* ObjCProtocol::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ObjCProperty >&
ObjCProtocol::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::ObjCProperty >*
ObjCProtocol::mutable_property() {
  return &property_;
}

// -------------------------------------------------------------------

// ObjCCategory

// required string name = 1;
inline bool ObjCCategory::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjCCategory::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjCCategory::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjCCategory::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ObjCCategory::name() const {
  return *name_;
}
inline void ObjCCategory::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ObjCCategory::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ObjCCategory::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjCCategory::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ObjCCategory::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ObjCCategory::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string base_protocol = 2;
inline int ObjCCategory::base_protocol_size() const {
  return base_protocol_.size();
}
inline void ObjCCategory::clear_base_protocol() {
  base_protocol_.Clear();
}
inline const ::std::string& ObjCCategory::base_protocol(int index) const {
  return base_protocol_.Get(index);
}
inline ::std::string* ObjCCategory::mutable_base_protocol(int index) {
  return base_protocol_.Mutable(index);
}
inline void ObjCCategory::set_base_protocol(int index, const ::std::string& value) {
  base_protocol_.Mutable(index)->assign(value);
}
inline void ObjCCategory::set_base_protocol(int index, const char* value) {
  base_protocol_.Mutable(index)->assign(value);
}
inline void ObjCCategory::set_base_protocol(int index, const char* value, size_t size) {
  base_protocol_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjCCategory::add_base_protocol() {
  return base_protocol_.Add();
}
inline void ObjCCategory::add_base_protocol(const ::std::string& value) {
  base_protocol_.Add()->assign(value);
}
inline void ObjCCategory::add_base_protocol(const char* value) {
  base_protocol_.Add()->assign(value);
}
inline void ObjCCategory::add_base_protocol(const char* value, size_t size) {
  base_protocol_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ObjCCategory::base_protocol() const {
  return base_protocol_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ObjCCategory::mutable_base_protocol() {
  return &base_protocol_;
}

// repeated .ObjCMethod method = 3;
inline int ObjCCategory::method_size() const {
  return method_.size();
}
inline void ObjCCategory::clear_method() {
  method_.Clear();
}
inline const ::ObjCMethod& ObjCCategory::method(int index) const {
  return method_.Get(index);
}
inline ::ObjCMethod* ObjCCategory::mutable_method(int index) {
  return method_.Mutable(index);
}
inline ::ObjCMethod* ObjCCategory::add_method() {
  return method_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ObjCMethod >&
ObjCCategory::method() const {
  return method_;
}
inline ::google::protobuf::RepeatedPtrField< ::ObjCMethod >*
ObjCCategory::mutable_method() {
  return &method_;
}

// repeated .ObjCProperty property = 4;
inline int ObjCCategory::property_size() const {
  return property_.size();
}
inline void ObjCCategory::clear_property() {
  property_.Clear();
}
inline const ::ObjCProperty& ObjCCategory::property(int index) const {
  return property_.Get(index);
}
inline ::ObjCProperty* ObjCCategory::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::ObjCProperty* ObjCCategory::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ObjCProperty >&
ObjCCategory::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::ObjCProperty >*
ObjCCategory::mutable_property() {
  return &property_;
}

// -------------------------------------------------------------------

// TranslationUnit

// repeated .ObjCClass class = 1;
inline int TranslationUnit::class__size() const {
  return class__.size();
}
inline void TranslationUnit::clear_class_() {
  class__.Clear();
}
inline const ::ObjCClass& TranslationUnit::class_(int index) const {
  return class__.Get(index);
}
inline ::ObjCClass* TranslationUnit::mutable_class_(int index) {
  return class__.Mutable(index);
}
inline ::ObjCClass* TranslationUnit::add_class_() {
  return class__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ObjCClass >&
TranslationUnit::class_() const {
  return class__;
}
inline ::google::protobuf::RepeatedPtrField< ::ObjCClass >*
TranslationUnit::mutable_class_() {
  return &class__;
}

// repeated .ObjCProtocol protocol = 2;
inline int TranslationUnit::protocol_size() const {
  return protocol_.size();
}
inline void TranslationUnit::clear_protocol() {
  protocol_.Clear();
}
inline const ::ObjCProtocol& TranslationUnit::protocol(int index) const {
  return protocol_.Get(index);
}
inline ::ObjCProtocol* TranslationUnit::mutable_protocol(int index) {
  return protocol_.Mutable(index);
}
inline ::ObjCProtocol* TranslationUnit::add_protocol() {
  return protocol_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ObjCProtocol >&
TranslationUnit::protocol() const {
  return protocol_;
}
inline ::google::protobuf::RepeatedPtrField< ::ObjCProtocol >*
TranslationUnit::mutable_protocol() {
  return &protocol_;
}

// repeated .ObjCCategory category = 3;
inline int TranslationUnit::category_size() const {
  return category_.size();
}
inline void TranslationUnit::clear_category() {
  category_.Clear();
}
inline const ::ObjCCategory& TranslationUnit::category(int index) const {
  return category_.Get(index);
}
inline ::ObjCCategory* TranslationUnit::mutable_category(int index) {
  return category_.Mutable(index);
}
inline ::ObjCCategory* TranslationUnit::add_category() {
  return category_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ObjCCategory >&
TranslationUnit::category() const {
  return category_;
}
inline ::google::protobuf::RepeatedPtrField< ::ObjCCategory >*
TranslationUnit::mutable_category() {
  return &category_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ObjCIndex_2eproto__INCLUDED
