package objc

public trait <metaclass-for-BaseClass> {
    public open fun baseClassMethod(): kotlin.Unit
}

public trait <metaclass-for-BaseProtocol> {
    public open fun baseProtocolMethod(): kotlin.Unit
}

public trait <metaclass-for-Derived> : objc.<metaclass-for-BaseClass>, objc.<metaclass-for-BaseProtocol> {
    public open override /*1*/ /*fake_override*/ fun baseClassMethod(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun baseProtocolMethod(): kotlin.Unit
    public open fun derivedClassMethod(): kotlin.Unit
}

public trait <metaclass-for-DerivedProtocol> : objc.<metaclass-for-BaseProtocol> {
    public open override /*1*/ /*fake_override*/ fun baseProtocolMethod(): kotlin.Unit
    public open fun derivedProtocolMethod(): kotlin.Unit
}

public open class BaseClass : jet.objc.ObjCObject {
    invisible_fake abstract override /*1*/ /*fake_override*/ val pointer: kotlin.Long
    
    public class object <class-object-for-BaseClass> : jet.objc.ObjCClass, objc.<metaclass-for-BaseClass>, objc.BaseClass {
        invisible_fake abstract override /*1*/ /*fake_override*/ val pointer: kotlin.Long
        public open override /*1*/ /*fake_override*/ fun baseClassMethod(): kotlin.Unit
    }
}

public trait BaseProtocol {
}

public open class Derived : objc.BaseClass, objc.BaseProtocol {
    invisible_fake abstract override /*1*/ /*fake_override*/ val pointer: kotlin.Long
    
    public class object <class-object-for-Derived> : jet.objc.ObjCClass, objc.<metaclass-for-Derived>, objc.BaseClass {
        invisible_fake abstract override /*1*/ /*fake_override*/ val pointer: kotlin.Long
        public open override /*1*/ /*fake_override*/ fun baseClassMethod(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun baseProtocolMethod(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun derivedClassMethod(): kotlin.Unit
    }
}

public trait DerivedProtocol : objc.BaseProtocol {
}
