<root>
    <item name='libcore.reflect.AnnotationAccess A getAnnotation(java.lang.Class&lt;?&gt;, java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess boolean isAnonymousClass(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.String getInnerClassName(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.InternalNames java.lang.String getInternalName(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.Class&lt;?&gt; getDeclaringClass(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.Class&lt;?&gt;[] getMemberClasses(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationMember libcore.reflect.AnnotationMember setDefinition(libcore.reflect.AnnotationMember) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationMember boolean equalArrayValue(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationMember libcore.reflect.AnnotationMember setDefinition(libcore.reflect.AnnotationMember)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.Class&lt;?&gt;[] protoIndexToParameters(java.lang.Class&lt;?&gt;, com.android.dex.Dex, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationFactory libcore.reflect.AnnotationMember[] getElementsDescription(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess boolean isAnnotationPresent(java.lang.Class&lt;?&gt;, java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.annotation.Annotation[][] getParameterAnnotations(java.lang.reflect.Member)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationFactory A createAnnotation(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;, libcore.reflect.AnnotationMember[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationFactory java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.annotation.Annotation[][] getParameterAnnotations(java.lang.reflect.Member) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.Types void appendArrayGenericType(java.lang.StringBuilder, java.lang.reflect.Type[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.Types java.lang.String toString(java.lang.Class&lt;?&gt;[]) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.GenericArrayTypeImpl java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess A getAnnotation(java.lang.Class&lt;?&gt;, java.lang.Class&lt;A&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.util.List&lt;java.lang.annotation.Annotation&gt; getDeclaredAnnotations(java.lang.reflect.AnnotatedElement)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.Types void appendTypeName(java.lang.StringBuilder, java.lang.Class&lt;?&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess int getFieldIndex(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess A getDeclaredAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class&lt;A&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess boolean isDeclaredAnnotationPresent(java.lang.reflect.AnnotatedElement, java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.Types java.lang.reflect.Type[] getClonedTypeArray(libcore.reflect.ListOfTypes) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.ListOfTypes java.lang.reflect.Type[] getResolvedTypes()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.Object getDefaultValue(java.lang.reflect.Method) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.ParameterizedTypeImpl java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess boolean isAnnotationPresent(java.lang.Class&lt;?&gt;, java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess boolean isDeclaredAnnotationPresent(java.lang.reflect.AnnotatedElement, java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess int getMethodIndex(java.lang.Class&lt;?&gt;, java.lang.String, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess int getFieldIndex(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess A getDeclaredAnnotation(java.lang.reflect.AnnotatedElement, java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.ListOfTypes java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.Types java.lang.String toString(java.lang.Class&lt;?&gt;[])'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.util.List&lt;java.lang.annotation.Annotation&gt; getDeclaredAnnotations(java.lang.reflect.AnnotatedElement) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.annotation.Annotation[] getAnnotations(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationFactory java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.Class&lt;?&gt;[] getExceptions(java.lang.reflect.AnnotatedElement) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess int getInnerClassFlags(java.lang.Class&lt;?&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.InternalNames java.lang.String getInternalName(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.Types java.lang.String getSignature(java.lang.Class&lt;?&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.reflect.AccessibleObject getEnclosingMethodOrConstructor(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.InternalNames java.lang.Class&lt;?&gt; getClass(java.lang.ClassLoader, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationMember java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.String getSignature(java.lang.reflect.AnnotatedElement) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.Class&lt;?&gt;[] typeIndexToInterfaces(java.lang.Class&lt;?&gt;, com.android.dex.Dex, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.AnnotationAccess java.lang.Class&lt;?&gt;[] protoIndexToParameters(java.lang.Class&lt;?&gt;, com.android.dex.Dex, int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.WildcardTypeImpl java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='libcore.reflect.Types void appendTypeName(java.lang.StringBuilder, java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
